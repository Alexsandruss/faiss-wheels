name: Build and test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: [created]
jobs:
  build-linux:
    if: false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - cp36-cp36m
          - cp37-cp37m
          - cp38-cp38
          - cp39-cp39
        cuda:
          - true
          - false
        avx2:
          - false
    container: quay.io/pypa/manylinux2014_x86_64
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Set up Python
      run: echo "/opt/python/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
    - name: Install build dependency
      env:
        SWIG_VERSION: '4.0.2'
      run: |
        sed -i 's/mirrorlist=https/mirrorlist=http/' /etc/yum.repos.d/epel.repo
        yum install -y \
            openblas-devel \
            openblas-static \
            pcre-devel
        curl -fsSLO --retry 3 http://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz
        tar xzf swig-${SWIG_VERSION}.tar.gz
        cd swig-${SWIG_VERSION}
        ./configure
        make -j4
        make install
        cd ..
        echo "FAISS_ENABLE_GPU=OFF" >> $GITHUB_ENV
        echo "FAISS_LDFLAGS=-l:libfaiss.a -l:libopenblas.a -lgfortran" >> $GITHUB_ENV
        echo "CXXFLAGS=-fvisibility=hidden -fdata-sections -ffunction-sections" >> $GITHUB_ENV
    - name: Enable AVX2 flags
      if: matrix.avx2
      run: |
        echo "CXXFLAGS=${CXXFLAGS} -mavx2 -mf16c" >> $GITHUB_ENV
        echo "FAISS_ENABLE_AVX2=true"
    - name: Install CUDA build tools
      if: matrix.cuda
      env:
        CUDA_VERSION: '10.0'
        CUDA_PKG_VERSION: 10-0-10.0.130-1
        CUBLAS_PKG_VERSION: 10-0-10.0.130-1
        NVIDIA_GPGKEY_SUM: d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5
        NVIDIA_GPGKEY_URL: http://developer.download.nvidia.com/compute/cuda/repos/rhel6/x86_64/7fa2af80.pub
      run: |
        curl -fsSL --retry 3 $NVIDIA_GPGKEY_URL | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA
        echo "$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c -
        tee /etc/yum.repos.d/cuda.repo <<EOF
        [cuda]
        name=cuda
        baseurl=http://developer.download.nvidia.com/compute/cuda/repos/rhel6/x86_64
        enabled=1
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA
        EOF
        yum install -y \
            cuda-command-line-tools-${CUDA_PKG_VERSION} \
            cuda-cublas-dev-${CUBLAS_PKG_VERSION} \
            devtoolset-7-gcc \
            devtoolset-7-gcc-c++ \
            devtoolset-7-gcc-gfortran \
            devtoolset-7-binutils
        ln -s cuda-${CUDA_VERSION} /usr/local/cuda
        echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf
        echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
        echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
        ldconfig
        echo "FAISS_ENABLE_GPU=ON" >> $GITHUB_ENV
        echo "FAISS_LDFLAGS=${FAISS_LDFLAGS} -lcublas_static -lcudart_static -lculibos" >> $GITHUB_ENV
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
        echo "/opt/rh/devtoolset-7/root/usr/bin" >> $GITHUB_PATH
    - name: Build and install faiss
      run: |
        cd faiss
        mkdir build && cd build
        cmake .. \
          -DFAISS_ENABLE_GPU=${FAISS_ENABLE_GPU} \
          -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=ON \
          -DCMAKE_CUDA_ARCHITECTURES="35;52;60;61;70;75" \
          -DCMAKE_BUILD_TYPE=Release
        make -j4
        make install
        cd ../..
    - name: Build package
      env:
        NUMPY_VERSION: '1.18.0'
      run: |
        # Hack to include hard-coded `<faiss/python/python_callbacks.h>`
        mkdir /usr/local/include/faiss/python/
        mv faiss/faiss/python/python_callbacks.h /usr/local/include/faiss/python/
        mv faiss/faiss/python/swigfaiss.swig faiss/faiss/python/swigfaiss.i
        touch faiss/contrib/__init__.py

        pip install --no-cache-dir -U pip
        pip install --no-cache-dir wheel numpy==${NUMPY_VERSION}
        python setup.py sdist
        pip wheel . -w wheelhouse --no-deps --verbose
        auditwheel repair wheelhouse/faiss*.whl -w dist
        ls -lh dist/
    - name: Install and test
      if: matrix.python-version != 'cp39-cp39'
      run: |
        pip install --no-cache-dir dist/faiss*.whl
        pip install --no-cache-dir pytest scipy torch
        pytest faiss/tests --deselect="faiss/tests/test_contrib.py::TestComputeGT::test_compute_GT"
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'created'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        pip install --no-cache-dir twine
        twine upload --skip-existing dist/*
  build-mac:
    if: false
    runs-on: macos-latest
    strategy:
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        avx2:
          - false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build dependency
      run: |
        brew install libomp swig
        brew reinstall llvm
        export LLVM_PREFIX=$(brew --prefix llvm)
        export LIBOMP_PREFIX=$(brew --prefix libomp)
        echo "CC=${LLVM_PREFIX}/bin/clang" >> $GITHUB_ENV
        echo "CXX=${LLVM_PREFIX}/bin/clang++" >> $GITHUB_ENV
        echo "CFLAGS=-stdlib=libc++" >> $GITHUB_ENV
        echo "CXXFLAGS=-stdlib=libc++ -I${LIBOMP_PREFIX}/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L${LIBOMP_PREFIX}/lib" >> $GITHUB_ENV
        echo "FAISS_LDFLAGS=/usr/local/lib/libfaiss.a -L${LIBOMP_PREFIX}/lib ${LIBOMP_PREFIX}/lib/libomp.a -framework Accelerate" >> $GITHUB_ENV
    - name: Enable AVX2 flags
      if: matrix.avx2
      run: |
        echo "CXXFLAGS=${CXXFLAGS} -mavx2 -mf16c" >> $GITHUB_ENV
        echo "FAISS_ENABLE_AVX2=true" >> $GITHUB_ENV
    - name: Build and install faiss
      run: |
        cd faiss
        mkdir build && cd build
        cmake .. -DFAISS_ENABLE_GPU=OFF -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Release
        make -j4
        make install
        cd ../..
    - name: Build package
      env:
        NUMPY_VERSION: '1.18.0'
      run: |
        # Hack to include hard-coded `<faiss/python/python_callbacks.h>`
        mkdir /usr/local/include/faiss/python/
        mv faiss/faiss/python/python_callbacks.h /usr/local/include/faiss/python/
        mv faiss/faiss/python/swigfaiss.swig faiss/faiss/python/swigfaiss.i
        touch faiss/contrib/__init__.py

        pip install --no-cache-dir -U pip
        pip install --no-cache-dir wheel numpy==${NUMPY_VERSION}
        pip wheel . -w dist --no-deps --verbose
        ls -lh dist/
    - name: Install and test
      if: matrix.python-version != 3.9
      run: |
        pip install --no-cache-dir dist/faiss*.whl
        pip install --no-cache-dir pytest scipy
        pytest faiss/tests
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'created'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        pip install --no-cache-dir twine
        twine upload --skip-existing dist/*
  build-win:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version:
          - 3.7
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: conda-incubator/setup-miniconda@v1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
    - name: Install OpenBLAS build dependency
      run: |
        conda config --add channels conda-forge
        conda install -y flang clangdev perl libflang ninja
        echo "LIB=${CONDA_PREFIX}\Library\lib;${LIB}" >> $GITHUB_ENV
        echo "CPATH=${CONDA_PREFIX}\Library\include;${CPATH}" >> $GITHUB_ENV
    - name: Build OpenBLAS
      run: |
        git clone https://github.com/xianyi/OpenBLAS.git
        cd OpenBLAS
        cmake . \
          -B build \
          -G "Ninja" \
          -DCMAKE_CXX_COMPILER=clang-cl \
          -DCMAKE_C_COMPILER=clang-cl \
          -DCMAKE_Fortran_COMPILER=flang \
          -DBUILD_WITHOUT_LAPACK=no \
          -DNOFORTRAN=0 \
          -DDYNAMIC_ARCH=ON \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release -j 4
        cmake --install . --prefix c:\opt -v
    - name: Build and install faiss
      run: |
        cd faiss
        cmake . \
          -B build \
          -A x64 \
          -DFAISS_ENABLE_GPU=OFF \
          -DFAISS_ENABLE_PYTHON=OFF \
          -DBUILD_TESTING=OFF
        cmake --build build --config Release -j 4
        cmake --install build --config Release
        cd ..
    - name: Install swig
      run: |
        choco install swig
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
