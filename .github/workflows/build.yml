name: Build and test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: [created]
env:
  SWIG_VERSION: '4.0.2'
  NUMPY_VERSION: '1.18.0'
  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        python-version:
          - cp36-cp36m
          - cp37-cp37m
          - cp38-cp38
          - cp39-cp39
        cuda:
          - false
          - true
    env:
      FAISS_ENABLE_GPU: 'OFF'
      CUDA_VERSION: '10.0'
      CUDA_PKG_VERSION: 10-0-10.0.130-1
      CUBLAS_PKG_VERSION: 10-0-10.0.130-1
      NVIDIA_GPGKEY_SUM: d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5
      NVIDIA_GPGKEY_URL: http://developer.download.nvidia.com/compute/cuda/repos/rhel6/x86_64/7fa2af80.pub
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Set up Python
      run: echo "/opt/python/${{ matrix.python-version }}/bin" >> $GITHUB_PATH
    - name: Install build dependency
      run: |
        pip install intel-openmp mkl-static
        sed -i 's/mirrorlist=https/mirrorlist=http/' /etc/yum.repos.d/epel.repo
        yum install -y pcre-devel
        curl -fsSLO --retry 3 http://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz
        tar xzf swig-${SWIG_VERSION}.tar.gz
        cd swig-${SWIG_VERSION}
        ./configure
        make -j4
        make install
        cd ..
        echo "MKL_LIBRARIES=-L$(python -c 'import sys; print(sys.prefix)')/lib -Wl,--start-group -l:libmkl_intel_lp64.a -l:libmkl_intel_thread.a -l:libmkl_core.a -liomp5 -Wl,--end-group" >> $GITHUB_ENV
        echo "FAISS_LDFLAGS=-liomp5" >> $GITHUB_ENV
        echo "FAISS_OPT_LEVEL=all" >> $GITHUB_ENV
        echo "CXXFLAGS=-fvisibility=hidden -fdata-sections -ffunction-sections" >> $GITHUB_ENV
    - name: Install CUDA build tools
      if: matrix.cuda
      run: |
        curl -fsSL --retry 3 $NVIDIA_GPGKEY_URL | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA
        echo "$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c -
        tee /etc/yum.repos.d/cuda.repo <<EOF
        [cuda]
        name=cuda
        baseurl=http://developer.download.nvidia.com/compute/cuda/repos/rhel6/x86_64
        enabled=1
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA
        EOF
        yum install -y \
            cuda-command-line-tools-${CUDA_PKG_VERSION} \
            cuda-cublas-dev-${CUBLAS_PKG_VERSION} \
            devtoolset-7-gcc \
            devtoolset-7-gcc-c++ \
            devtoolset-7-gcc-gfortran \
            devtoolset-7-binutils
        ln -s cuda-${CUDA_VERSION} /usr/local/cuda
        echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf
        echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
        echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
        ldconfig
        echo "FAISS_ENABLE_GPU=ON" >> $GITHUB_ENV
        echo "FAISS_LDFLAGS=${FAISS_LDFLAGS} -lcublas_static -lcudart_static -lculibos" >> $GITHUB_ENV
        echo "CUDAFLAGS=--compiler-options=-fvisibility=hidden,-fdata-sections,-ffunction-sections" >> $GITHUB_ENV
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
        echo "/opt/rh/devtoolset-7/root/usr/bin" >> $GITHUB_PATH
    - name: Build and install faiss
      run: |
        cd faiss
        cmake . \
          -B build_avx2 \
          -DFAISS_ENABLE_GPU=${FAISS_ENABLE_GPU} \
          -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=ON \
          -DFAISS_OPT_LEVEL=avx2 \
          -DBLA_STATIC=ON \
          -DBLA_VENDOR=Intel10_64lp \
          -DMKL_LIBRARIES="${MKL_LIBRARIES}" \
          -DCMAKE_CUDA_ARCHITECTURES="35-real;50-real;60-real;70-real;75" \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build_avx2 --config Release -j2
        cmake --install build_avx2 -v --prefix ../_install_avx2
        cmake . \
          -B build_generic \
          -DFAISS_ENABLE_GPU=${FAISS_ENABLE_GPU} \
          -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=ON \
          -DFAISS_OPT_LEVEL=generic \
          -DBLA_STATIC=ON \
          -DBLA_VENDOR=Intel10_64lp \
          -DMKL_LIBRARIES="${MKL_LIBRARIES}" \
          -DCMAKE_CUDA_ARCHITECTURES="35-real;50-real;60-real;70-real;75" \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build_generic --config Release -j2
        cmake --install build_generic -v --prefix ../_install_generic
        cd ..
        echo "FAISS_LDFLAGS=${FAISS_LDFLAGS} -L_install_generic/lib64 -L_install_avx2/lib64 " >> $GITHUB_ENV
        echo "FAISS_INCLUDE=_install_generic/include" >> $GITHUB_ENV
    - name: Build package
      run: |
        cp faiss/faiss/python/swigfaiss.swig faiss/faiss/python/swigfaiss.i
        cp faiss/faiss/python/swigfaiss.swig faiss/faiss/python/swigfaiss_avx2.i
        sed -i -e "s/swigfaiss/swigfaiss_avx2/" faiss/faiss/python/swigfaiss_avx2.i
        touch faiss/contrib/__init__.py

        pip install --no-cache-dir -U pip
        pip install --no-cache-dir wheel numpy==${NUMPY_VERSION}
        python setup.py sdist
        pip wheel . -w wheelhouse --no-deps --verbose
        auditwheel repair wheelhouse/faiss*.whl -w dist
        ls -lh dist
    - name: Install and test
      run: |
        pip install --no-cache-dir dist/faiss*.whl
        pip install --no-cache-dir pytest scipy torch
        pytest --deselect="faiss/tests/test_contrib.py::TestComputeGT::test_compute_GT"
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'created'
      run: |
        pip install --no-cache-dir twine
        twine upload --skip-existing dist/*
  build-mac:
    runs-on: macos-latest
    env:
      CC: clang
      CXX: clang++
    strategy:
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set optimization level
      run: |
        echo "FAISS_OPT_LEVEL=all" >> $GITHUB_ENV
    - name: Install build dependency
      run: |
        brew install libomp swig
        pip install mkl-static intel-openmp
        echo "MKL_LIBRARIES=-L$(python -c 'import sys; print(sys.prefix)')/lib -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core" >> $GITHUB_ENV
    - name: Build and install faiss
      run: |
        cd faiss
        cmake . \
          -B build_avx2 \
          -DFAISS_ENABLE_GPU=OFF \
          -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=OFF \
          -DFAISS_OPT_LEVEL=avx2 \
          -DMKL_LIBRARIES="${MKL_LIBRARIES}" \
          -DBLA_STATIC=ON \
          -DBLA_VENDOR=Intel10_64lp \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build_avx2 --config Release -j2
        cmake --install build_avx2 -v --prefix ../_install_avx2
        cmake . \
          -B build_generic \
          -DFAISS_ENABLE_GPU=OFF \
          -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=ON \
          -DFAISS_OPT_LEVEL=generic \
          -DMKL_LIBRARIES="${MKL_LIBRARIES}" \
          -DBLA_STATIC=ON \
          -DBLA_VENDOR=Intel10_64lp \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build build_generic --config Release -j2
        cmake --install build_generic -v --prefix ../_install_generic
        cd ..
    - name: Build package
      run: |
        cp faiss/faiss/python/swigfaiss.swig faiss/faiss/python/swigfaiss.i
        cp faiss/faiss/python/swigfaiss.swig faiss/faiss/python/swigfaiss_avx2.i
        sed -i -e "s/swigfaiss/swigfaiss_avx2/" faiss/faiss/python/swigfaiss_avx2.i
        touch faiss/contrib/__init__.py

        export FAISS_LDFLAGS="-L_install_generic/lib -L_install_avx2/lib -lomp -framework Accelerate"
        export FAISS_INCLUDE="_install_generic/include"
        pip install --no-cache-dir -U pip
        pip install --no-cache-dir wheel numpy==${NUMPY_VERSION}
        pip wheel . -w dist --no-deps --verbose
        ls -lh dist
    - name: Install and test
      if: matrix.python-version != 3.9 && matrix.opt != 'avx2'
      run: |
        pip install --no-cache-dir dist/faiss*.whl
        pip install --no-cache-dir pytest scipy
        pytest
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'created' && matrix.opt == 'generic'
      run: |
        pip install --no-cache-dir twine
        twine upload --skip-existing dist/*
  build-win:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
    env:
      CMAKE_PREFIX_PATH: c:\opt
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up build environment
      run: |
        $installationPath = vswhere.exe -prerelease -latest -property installationPath
        if ($installationPath -and (test-path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
          & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -arch=x64 -no_logo && set" | foreach-object {
            $name, $value = $_ -split '=', 2
            echo "$name=$value" >> ${env:GITHUB_ENV}
          }
        }
    - name: Set optimization level
      run: |
        echo "FAISS_OPT_LEVEL=generic" >> ${env:GITHUB_ENV}
    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
    - name: Install build tools
      run: |
        conda config --add channels conda-forge
        conda install -y flang clangdev perl libflang ninja swig
        pip install mkl-static
        echo "LIB=${env:LIB};${env:CONDA_PREFIX}\Library\lib" >> ${env:GITHUB_ENV}
        echo "CPATH=${env:CPATH};${env:CONDA_PREFIX}\Library\include" >> ${env:GITHUB_ENV}
    - name: Build and install faiss
      run: |
        cd faiss
        cmake . `
          -B build_generic `
          -A x64 `
          -DFAISS_ENABLE_GPU=OFF `
          -DFAISS_ENABLE_PYTHON=OFF `
          -DFAISS_OPT_LEVEL=generic `
          -DBUILD_TESTING=ON `
          -DBLA_STATIC=ON `
          -DBLA_VENDOR=Intel10_64lp
        cmake --build build_generic --config Release -j
        cmake --install build_generic --prefix ..\_install_generic -v
        cd ..
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build package
      run: |
        cp faiss\faiss\python\swigfaiss.swig faiss\faiss\python\swigfaiss.i
        New-Item -ItemType file faiss\contrib\__init__.py
        $Env:FAISS_INCLUDE = "$pwd\faiss\include"
        $Env:FAISS_LDFLAGS = "/LIBPATH:$pwd\_install_generic\lib"
        $Env:FAISS_LDFLAGS += " mkl_intel_lp64.lib libiomp5md.lib mkl_tbb_thread.lib mkl_core.lib"

        pip install --no-cache-dir -U pip
        pip install --no-cache-dir wheel numpy==${env:NUMPY_VERSION}
        pip wheel . -w dist --no-deps --verbose
        Get-ChildItem -Path dist
    - name: Install and test
      if: matrix.python-version != 3.9
      run: |
        pip install --no-cache-dir (Get-Item .\dist\faiss*.whl)
        pip install --no-cache-dir pytest scipy
        pytest
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'created' && matrix.opt == 'generic'
      run: |
        pip install --no-cache-dir twine
        twine upload --skip-existing (Get-Item .\dist\*)
